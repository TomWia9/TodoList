@using TodoList.Client.Services
@using TodoList.Shared.Dto
@using System.Net

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit list title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <EditForm Model="@ListOfTodosForUpdate" OnValidSubmit="@(async () => await SaveChangesAsync())">
                <DataAnnotationsValidator/>

                <div class="modal-body">
                    @if (_updateConflict)
                    {
                        <p class="text-danger">List with this title already exists</p>
                    }
                    else if (_updateFailed)
                    {
                        <p class="text-danger">Failed to update list, try again later</p>
                    }
                    else
                    {
                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText @bind-Value="ListOfTodosForUpdate.Title" class="form-control" id="name"/>
                            <ValidationMessage For="@(() => ListOfTodosForUpdate.Title)"/>
                        </div>
                    }

                </div>
                <div class="modal-footer d-flex justify-content-between">
                    <div>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
                    </div>
                </div>
            </EditForm>

        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public int ListId { get; set; }

    [Parameter]
    public string ListTitle { get; set; }

    private ListOfTodosForUpdateDto ListOfTodosForUpdate { get; } = new();

    [Inject]
    protected AppStateContainer AppState { get; set; }

    [Inject]
    protected TodoListsService TodoListsService { get; set; }

    [Parameter]
    public EventCallback OnTodoListUpdated { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private bool _updateFailed = false;
    private bool _updateConflict = false;

    public void Open()
    {
       
        ListOfTodosForUpdate.Title = ListTitle;

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        _updateFailed = false;
        _updateConflict = false;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task SaveChangesAsync()
    {
        var response = await TodoListsService.UpdateList(ListId, ListOfTodosForUpdate);

        if (response.IsSuccessStatusCode)
        {
            _updateFailed = false;
            _updateConflict = false;
            await OnTodoListUpdated.InvokeAsync();
            AppState.UpdateListTitle(ListId, ListOfTodosForUpdate.Title);
            Close();
        }
        else if (response.StatusCode == HttpStatusCode.Conflict)
        {
            _updateConflict = true;
        }
        else
        {
            _updateFailed = true;
        }
    }

}